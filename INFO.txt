## URLs

# Good z-wave info
http://www.cd-jackson.com/index.php/zwave/zwave-device-database/zwave-device-database-guide
http://wiki.linuxmce.org/index.php/ZWave_API
https://github.com/yepher/RaZBerry

# Other implementations
https://github.com/openhab/org.openhab.binding.zwave
https://github.com/oberasoftware/zwave
https://github.com/whizzosoftware/WZWave
https://github.com/NetHome/ZWave

## My running notes

====

skicka NAK om checksum inte stämmer.
Cancel == Resend request

Starta om och leta efter SOF om inte längd eller command-type är rimliga.

private const int DEFAULT_TIMEOUT = 10000; // How long in ms to wait for an response
        obs! olika, 5, 10 s.

checka efter publicerade paket! samma som föregående => ignorera.

    TRANSPORT LAYER (serial) => FRAME LAYER (cehcksum, ack/nak) => SESSION LAYER (sequence number, match request/response) => APPLICATION LAYER
obs. APPLICATION LAYER == hålla rätt på noder och nätverkets hälsa, ovanpå detta finns ytterligare ett lager
som typ skickar on/off och läser av statusrapporter från sensorer osv.

Kan motsatsen gälla, att vi får emot request-frames med en sequence???

Sätt timestamp på när vi tar emot framesen.

skillnad på frame och packet? frame är lågnivå, packet själva innehållet?

Ett bra dbus-protokoll ska antagligen supporta flera olika controllers.
gör så här: varje enhet har en adress som är controller:id eller nät:id.

# wait max 5 seconds on reply to request.
# checksum: räkna ut: sätt till 0, gör xor över hela, skriv resultatet
# kolla: räkna xor över hela inkl checksum, då ska det bli 0. el 0xff?
#kallas LRC using XOR.

 * A ZWave serial message frame is made up as follows
 * Byte 0 : SOF (Start of Frame) 0x01
 * Byte 1 : Length of frame - number of bytes to follow
 * Byte 2 : Request (0x00) or Response (0x01)
 * Byte 3 : Message Class (see SerialMessageClass)
 * Byte 4+: Message Class data                             >> Message Payload
 * Byte x : Last byte is checksum

void Controller::PlayInitSequence
(
	Driver* _driver
)
{
	_driver->SendMsg( new Msg( "FUNC_ID_ZW_GET_VERSION", 0xff, REQUEST, FUNC_ID_ZW_GET_VERSION, false ), Driver::MsgQueue_Command );
	_driver->SendMsg( new Msg( "FUNC_ID_ZW_MEMORY_GET_ID", 0xff, REQUEST, FUNC_ID_ZW_MEMORY_GET_ID, false ), Driver::MsgQueue_Command );
	_driver->SendMsg( new Msg( "FUNC_ID_ZW_GET_CONTROLLER_CAPABILITIES", 0xff, REQUEST, FUNC_ID_ZW_GET_CONTROLLER_CAPABILITIES, false ), Driver::MsgQueue_Command );
	_driver->SendMsg( new Msg( "FUNC_ID_SERIAL_API_GET_CAPABILITIES", 0xff, REQUEST, FUNC_ID_SERIAL_API_GET_CAPABILITIES, false ), Driver::MsgQueue_Command );
	_driver->SendMsg( new Msg( "FUNC_ID_ZW_GET_SUC_NODE_ID", 0xff, REQUEST, FUNC_ID_ZW_GET_SUC_NODE_ID, false ), Driver::MsgQueue_Command );
	// FUNC_ID_ZW_GET_VIRTUAL_NODES & FUNC_ID_SERIAL_API_GET_INIT_DATA has moved into the handler for FUNC_ID_SERIAL_API_GET_CAPABILITIES
}
#define FUNC_ID_ZW_MEMORY_GET_ID						0x20
#define FUNC_ID_ZW_GET_CONTROLLER_CAPABILITIES			0x05
#define FUNC_ID_SERIAL_API_GET_CAPABILITIES				0x07
#define FUNC_ID_ZW_GET_SUC_NODE_ID						0x56	// Try to retrieve a Static Update Controller node id (zero if no SUC present)

#define FUNC_ID_ZW_GET_VIRTUAL_NODES					0xA5	// Return all virtual nodes
#define FUNC_ID_SERIAL_API_GET_INIT_DATA				0x02

// at start of communications, send a NAK to resynchronise communications

openzwave installation deps:
libudev-dev

ozwcp:
libmicrohttpd-dev

---

2018-01-13 16:22:28.903 Info, Node001,     COMMAND_CLASS_BASIC is not mapped
2018-01-13 16:22:28.903 Info, Node001,   Mandatory Command Classes for Node 1:
2018-01-13 16:22:28.903 Info, Node001,     None
2018-01-13 16:22:28.903 Info, Node001,   Mandatory Command Classes controlled by Node 1:
2018-01-13 16:22:28.903 Info, Node001,     COMMAND_CLASS_BASIC

2018-01-13 16:22:28.920 Info, Node001, Sending (Command) message (Callback ID=0x00, Expected Reply=0x80) - Get Routing Info (Node=1): 0x01, 0x07, 0x00, 0x80, 0x01, 0x00, 0x00, 0x03, 0x7a
2018-01-13 16:22:28.924 Detail, Node001,   Received: 0x01, 0x20, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e
2018-01-13 16:22:28.924 Detail,
2018-01-13 16:22:28.924 Info, Node001, Received reply to FUNC_ID_ZW_GET_ROUTING_INFO
2018-01-13 16:22:28.924 Info, Node001,     Neighbors of this node are:
2018-01-13 16:22:28.924 Info, Node001,  (none reported)

--

2018-01-13 17:06:37.529 Detail, Node001, Queuing (Command) ControllerCommand_SendNodeInformation (Node=1): 0x01, 0x06, 0x00, 0x12, 0x01, 0x25, 0x0b, 0xc4
2018-01-13 17:06:37.529 Detail, Notification: ControllerCommand - Starting
2018-01-13 17:06:37.529 Info, Notification: ControllerCommand home fbe39bfd Event 1 Error 0
2018-01-13 17:06:37.529 Detail,
2018-01-13 17:06:37.529 Info, Node001, Sending (Command) message (Callback ID=0x0b, Expected Reply=0x12) - ControllerCommand_SendNodeInformation (Node=1): 0x01, 0x06, 0x00, 0x12, 0x01, 0x25, 0x0b, 0xc4
2018-01-13 17:06:37.538 Detail, Node001,   Received: 0x01, 0x04, 0x01, 0x12, 0x01, 0xe9
2018-01-13 17:06:37.538 Detail,
2018-01-13 17:06:37.538 Info, **TODO: handle response for 0x12** Please report this message.
2018-01-13 17:06:38.067 Detail, Node001,   Received: 0x01, 0x05, 0x00, 0x12, 0x0b, 0x01, 0xe2
2018-01-13 17:06:38.067 Detail,

FUNC_ID_APPLICATION_COMMAND_HANDLER - antar att det är den som prefixar alla paket unsolicited paket?
	uint8 status = _data[2];
	uint8 nodeId = _data[3];
    data[4] = len
	uint8 classId = _data[5];
	data[6] = actual data.
	 -- of this, [0] is cmd value
	if( ( status & RECEIVE_STATUS_ROUTED_BUSY ) != 0 )
	{
		m_routedbusy++;
	}
	if( ( status & RECEIVE_STATUS_TYPE_BROAD ) != 0 )
	{
		m_broadcastReadCnt++;
	}
		int cmp = memcmp( _data, node->m_lastReceivedMessage, sizeof(node->m_lastReceivedMessage));
		if( cmp == 0 && node->m_receivedTS.TimeRemaining() > -500 )
		{
			// if the exact same sequence of bytes are received within 500ms
			node->m_receivedDups++;
		}
		if( m_expectedReply == FUNC_ID_APPLICATION_COMMAND_HANDLER && m_expectedNodeId == nodeId )
		{
			// Need to confirm this is the correct response to the last sent request.
			// At least ignore any received messages prior to the send data request.
			node->m_lastResponseRTT = -node->m_sentTS.TimeRemaining();
		}
		else
		{
			node->m_receivedUnsolicited++;
		}

...
	else if( ControllerReplication::StaticGetCommandClassId() == classId )
	{
			m_controllerReplication->HandleMsg( &_data[6], _data[4] );

	if( CommandClass* pCommandClass = GetCommandClass( _data[5] ) )


	// See if there is already a copy of this message in the queue.  If so,
	// we delete it.  This is to prevent duplicates building up if the
	// device does not wake up very often.  Deleting the original and
	// adding the copy to the end avoids problems with the order of
	// commands such as on and off.


---
        elif frame.func == cmd.FUNC_ID_ZW_APPLICATION_UPDATE:
            node = Node()
            node.state = frame.data[0]
            node.node_id = frame.data[1]
            sen följer:
> 	0x0a 	10 	 ? len
> 	0x04 	4 	? basic class
> 	0x10 	16 	? generic
> 	0x01 	1 	? specific
> 	0x25 	37 	CommandClass=25
... och en lång lista av alla command classes!

           if (updateState == NODE_INFO_RECEIVED) {
                nodeId = in.read();
                int numberOfCommandClasses = in.read() - 3;
                basicDeviceClass = in.read();
                genericDeviceClass = in.read();
                specificDeviceClass = in.read();
                byte[] allCommandClasses = new byte[numberOfCommandClasses];
                in.read(allCommandClasses, 0, numberOfCommandClasses);


    # define TRANSMIT_OPTION_ACK		 						0x01
    # define TRANSMIT_OPTION_LOW_POWER		   				0x02
    # define TRANSMIT_OPTION_AUTO_ROUTE  					0x04
    # define TRANSMIT_OPTION_NO_ROUTE 						0x10
    # define TRANSMIT_OPTION_EXPLORE							0x20

first try: 0x05, second try: 0x25.
open hab uses  .setTransmitOptions(TRANSMIT_OPTION_ACK | TRANSMIT_OPTION_AUTO_ROUTE | TRANSMIT_OPTION_EXPLORE);
for all.

sending transaction:
send a send-request, status "send requested"
get a send-response, status "pending execution", returns immediately. do not send anything else before this.
... wait.
get a send-request, status "send executed" -- either ok or failed. this returns asynchronously.


---
FUNC_ID_ZW_GET_VERSION - response
FUNC_ID_ZW_MEMORY_GET_ID - response
FUNC_ID_ZW_GET_CONTROLLER_CAPABILITIES - response
FUNC_ID_SERIAL_API_GET_CAPABILITIES - response
FUNC_ID_ZW_GET_SUC_NODE_ID - response
FUNC_ID_ZW_GET_RANDOM - response
FUNC_ID_SERIAL_API_GET_INIT_DATA - response
FUNC_ID_ZW_GET_NODE_PROTOCOL_INFO- response
FUNC_ID_ZW_REQUEST_NETWORK_UPDATE - response

FUNC_ID_ZW_SEND_NODE_INFORMATION - response + request FUNC_ID_ZW_SEND_NODE_INFORMATION
FUNC_ID_ZW_REQUEST_NODE_INFO- response + request FUNC_ID_ZW_APPLICATION_UPDATE

FUNC_ID_ZW_SEND_DATA - response + request FUNC_ID_ZW_SEND_DATA
    # arg1: dest node
    # arg2: tx options 0x11
    # arg3: return handling, 0 = no reply, 0x03 = has reply (actually, callback id)
    extra_frame = Frame(REQUEST, cmd.FUNC_ID_ZW_SEND_NODE_INFORMATION, bytearray(b'\x03\x01'))

    extra_frame = Frame(REQUEST, cmd.FUNC_ID_ZW_APPLICATION_UPDATE, bytearray(b'\x81\x00\x00'))

FUNC_ID_SERIAL_API_APPL_NODE_INFORMATION -- no response? # maybe sent as a response to node information request from another?


FUNC_ID_APPLICATION_COMMAND_HANDLER -- incoming data from zwave, perhaps unsolicited!

entity state:
 - on
 - off

entity certainty:
 - verified
 - unverified

flow:
 entity is on - verified
 step 1: send off:
   - send zw-command set off -> still on, but unverified
   - rec zw-response (means command is queued for output on zwave device, but not sent)
   - rec zw-request (means command has been sent)
      -> set off, but still unverified
 step 2: verify off
   - send zw-command get state
   - rec zw-response (means command is queued for output on zwave device, but not sent)
   - rec zw-request (means command has been sent)
   - rec incoming-zw report -> still off, but verified

high application layer:
  turn_off()
  keeps track of current state and certainity per node. uses raw application layer.
   -- network management
   -- device communication

  raw application level:
    send_off(), read_state()
    maps zw commands to reasonable actions, e.g. makes sure a get() receives a report(). uses session level
    handles incoming msgs.

    session level
      send_with_response
      send_with_res_and_req
      dispatch_incoming_msg

      session uses frame layer (checksum, ack) + transport layer (rå serie-kommunikation)

---

not needed:
# not supported on my controller. probably needs a bridge.
    # Only do this if this is a bridge controller, i.e. library_type == 7
        if frame.func == cmd.FUNC_ID_ZW_GET_VIRTUAL_NODES:
            self.info.virtual_nodes_bitmask = int.from_bytes(frame.data[0:29], 'little')

            #assert len(frame.data) == 29

            print("virtual nodes: {}".format(self.info.virtual_nodes_bitmask))
            for i in range(0, 232):
                is_node = self.info.virtual_nodes_bitmask & (1 << i) != 0
                if is_node:
                    print("Has virtual node at {}".format(i))

    # arg1: random length, MIN=1, MAX = 32, rounded up to nearest even number.
        elif frame.func == cmd.FUNC_ID_ZW_GET_RANDOM:
            unknown1 = frame.data[0] # random RESPONSE = 1 ?
            random_len = frame.data[1]

            self.info.random = frame.data[2:]
            assert random_len == len(self.info.random)

            print("Random returned {}, unkn1 {}".format(self.info.random, unknown1))
